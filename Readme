


## Features and Implementation
- **Language:** C++
- **Libraries:** OpenCV 4.x, C++17 STL (filesystem, vector, etc.)
- **Detection Method:**
  - SIFT-based keypoint matching.
  - Lowe's ratio test for good matches.
  - Homography estimation to filter geometric consistency.
  - Bounding box generation from inlier matches.
  - Mask overlap validation.

## Directory Structure
- `main.cpp` : Handles data loading, detection, saving results, and evaluation.
- `src/detection.cpp` : Core object detection logic.
- `src/evaluate.cpp` : Evaluation of detection results.
- `include/*.hpp` : Header files for clean organization.
- `data/` : Dataset root (templates, masks, test images).
- `output/` : Detection output images and bounding box text files.

## Outputs
- Annotated detection images (`output/images/`).
- Predicted bounding boxes (`output/detections/*.txt`).
- Detection accuracy and mean IoU (mIoU) after evaluation.

## Key Debugging Tools
- Detailed `[DEBUG]` console outputs:
  - Matches per object.
  - Average matching distances.
  - Acceptance or rejection of matches based on thresholds.

## How to Build and Run
```bash
mkdir build && cd build
cmake ..
make
./cv_object_detector ../data ../output
```

## Synthetic Testing
- We implemented a synthetic test (`synthetic_test`) to simulate simple, controlled object placements.
- This verifies the matching and homography pipeline independently from noisy dataset issues.

## Performance Summary
- **Synthetic Tests:** High precision and recall.
- **Real Dataset:** Very low detection performance due to poor/missing labels and challenging scenes.
- **Major Success:** Correct pipeline structure; clean detection on ideal conditions.

## Known Issues
- Many ground-truth labels are missing or misaligned.
- Few Mustard bottle and power drill rarely detected due to dataset inconsistencies.

